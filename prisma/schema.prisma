generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Login {
  id           Int           @id @default(autoincrement())
  username     String        @unique @db.VarChar(50)
  email        String        @unique @db.VarChar(100)
  password     String        @db.VarChar(255)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  posts        posts[]
  user_details user_details?

  @@map("login_credentials")
}

model user_details {
  id                Int       @id @default(autoincrement())
  user_id           Int       @unique
  first_name        String?   @db.VarChar(50)
  last_name         String?   @db.VarChar(50)
  phone             String?   @unique @db.VarChar(20)
  date_of_birth     DateTime? @db.Date
  gender            String?   @db.VarChar(10)
  country           String?   @db.VarChar(100)
  postal_code       String?   @db.VarChar(20)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  login_credentials Login     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(100)
  posts posts[]
}

model posts {
  id                Int         @id @default(autoincrement())
  user_id           Int
  title             String      @db.VarChar(255)
  content           String
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  image_url         String?     @db.VarChar(255)
  category_id       Int?
  categories        categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  login_credentials Login       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
