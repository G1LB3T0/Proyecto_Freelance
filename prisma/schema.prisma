generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Login {
  id                  Int           @id @default(autoincrement())
  username            String        @unique @db.VarChar(50)
  email               String        @unique @db.VarChar(100)
  password            String        @db.VarChar(255)
  createdAt           DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  name                String?       @db.VarChar(100)
  posts               posts[]
  client_projects     project[]     @relation("ClientProjects")
  freelancer_projects project[]     @relation("FreelancerProjects")
  user_details        user_details?

  @@map("login_credentials")
}

model user_details {
  id                Int       @id @default(autoincrement())
  user_id           Int       @unique
  first_name        String?   @db.VarChar(50)
  last_name         String?   @db.VarChar(50)
  phone             String?   @unique @db.VarChar(20)
  date_of_birth     DateTime? @db.Date
  gender            String?   @db.VarChar(10)
  country           String?   @db.VarChar(100)
  postal_code       String?   @db.VarChar(20)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  login_credentials Login     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(100)
  posts   posts[]
  project project[]
}

model posts {
  id                Int         @id @default(autoincrement())
  user_id           Int
  title             String      @db.VarChar(255)
  content           String
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  image_url         String?     @db.VarChar(255)
  category_id       Int?
  categories        categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  login_credentials Login       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project {
  id              Int         @id @default(autoincrement())
  client_id       Int
  freelancer_id   Int?
  title           String      @db.VarChar(255)
  description     String
  budget          Decimal     @db.Decimal(10, 2)
  deadline        DateTime?   @db.Date
  status          String      @default("open") @db.VarChar(50)
  category_id     Int?
  skills_required String[]
  priority        String?     @default("medium") @db.VarChar(20)
  completion_date DateTime?   @db.Date
  created_at      DateTime?   @default(now()) @db.Timestamp(6)
  updated_at      DateTime?   @default(now()) @db.Timestamp(6)
  category        categories? @relation(fields: [category_id], references: [id])
  client          Login       @relation("ClientProjects", fields: [client_id], references: [id], onDelete: Cascade)
  freelancer      Login?      @relation("FreelancerProjects", fields: [freelancer_id], references: [id])
}

model project_proposals {
  id              Int       @id @default(autoincrement())
  project_id      Int
  freelancer_id   Int
  proposed_budget Decimal   @db.Decimal(10, 2)
  delivery_time   Int
  proposal_text   String
  status          String    @default("pending") @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  cover_letter    String?
  portfolio_links String[]
  updated_at      DateTime? @default(now()) @db.Timestamp(6)

  @@unique([project_id, freelancer_id])
}

model reviews {
  id          Int       @id @default(autoincrement())
  project_id  Int       @unique
  reviewer_id Int
  reviewed_id Int
  rating      Int
  comment     String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
}
